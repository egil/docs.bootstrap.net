@inject IUriHelper UriHelper
@implements IDisposable

@functions {
    private const string DefaultActiveClass = "active";

    [Parameter]
    private string MatchUrl { get; set; }

    [Parameter]
    private string Href { get; set; }

    [Parameter]
    private string Class { get; set; } = string.Empty;

    [Parameter]
    private string ActiveClass { get; set; } = DefaultActiveClass;

    [Parameter]
    private NavLinkMatch Match { get; set; }

    [Parameter]
    private RenderFragment ChildContent { get; set; }

    private bool MatchesMatchUrl { get; set; }

    private string CssClasses { get; set; }

    protected override void OnInit()
    {
        if (MatchUrl != null)
        {
            UriHelper.OnLocationChanged += OnLocationChanged;
        }
    }

    public void Dispose()
    {
        if (MatchUrl != null)
        {
            UriHelper.OnLocationChanged -= OnLocationChanged;
        }
    }

    private void OnLocationChanged(object sender, string location)
    {

        var shouldMatchNow = ShouldMatch(UriHelper.GetAbsoluteUri(), location);
        if (shouldMatchNow != MatchesMatchUrl)
        {
            MatchesMatchUrl = shouldMatchNow;
            CssClasses = MatchesMatchUrl ? CombineWithSpace(Class, DefaultActiveClass) : Class;
        }
    }

    protected override Task OnParametersSetAsync()
    {
        if (MatchUrl is null)
        {
            CssClasses = Class;
        }
        else
        {
            var matchUrlAbsolute = UriHelper.ToAbsoluteUri(MatchUrl).AbsoluteUri;
            MatchesMatchUrl = ShouldMatch(UriHelper.GetAbsoluteUri(), matchUrlAbsolute);
            CssClasses = MatchesMatchUrl ? CombineWithSpace(Class, DefaultActiveClass) : Class;
        }

        return Task.CompletedTask;
    }

    private bool ShouldMatch(string currentUriAbsolute, string matchUrlAbsolute)
    {
        if (EqualsHrefExactlyOrIfTrailingSlashAdded(currentUriAbsolute, matchUrlAbsolute))
        {
            return true;
        }

        if (Match == NavLinkMatch.Prefix && IsStrictlyPrefixWithSeparator(currentUriAbsolute, matchUrlAbsolute))
        {
            return true;
        }

        return false;
    }

    private bool EqualsHrefExactlyOrIfTrailingSlashAdded(string currentUriAbsolute, string matchUrlAbsolute)
    {
        if (string.Equals(currentUriAbsolute, matchUrlAbsolute, StringComparison.Ordinal))
        {
            return true;
        }

        if (currentUriAbsolute.Length == matchUrlAbsolute.Length - 1)
        {
            // Special case: highlight links to http://host/path/ even if you're
            // at http://host/path (with no trailing slash)
            //
            // This is because the router accepts an absolute URI value of "same
            // as base URI but without trailing slash" as equivalent to "base URI",
            // which in turn is because it's common for servers to return the same page
            // for http://host/vdir as they do for host://host/vdir/ as it's no
            // good to display a blank page in that case.
            if (matchUrlAbsolute[matchUrlAbsolute.Length - 1] == '/'
                && matchUrlAbsolute.StartsWith(currentUriAbsolute, StringComparison.Ordinal))
            {
                return true;
            }
        }

        return false;
    }

    private string CombineWithSpace(string str1, string str2) => str1 == null ? str2 : (str2 == null ? str1 : $"{str1} {str2}");

    private static bool IsStrictlyPrefixWithSeparator(string value, string prefix)
    {
        var prefixLength = prefix.Length;
        if (value.Length > prefixLength)
        {
            return value.StartsWith(prefix, StringComparison.Ordinal)
                && (
                    // Only match when there's a separator character either at the end of the
                    // prefix or right after it.
                    // Example: "/abc" is treated as a prefix of "/abc/def" but not "/abcdef"
                    // Example: "/abc/" is treated as a prefix of "/abc/def" but not "/abcdef"
                    prefixLength == 0
                    || !char.IsLetterOrDigit(prefix[prefixLength - 1])
                    || !char.IsLetterOrDigit(value[prefixLength])
                );
        }
        else
        {
            return false;
        }
    }

}
<NavLink ActiveClass=@ActiveClass class=@CssClasses href=@Href Match=@Match>@ChildContent</NavLink>