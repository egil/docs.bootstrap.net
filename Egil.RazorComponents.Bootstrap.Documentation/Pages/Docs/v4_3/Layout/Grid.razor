@page "/docs/4.3/layout/grid"

<DocHead Title="Grid system" RelatedBootstrapDoc="4.3/layout/grid/">
    Use our powerful mobile-first flexbox grid to build layouts of all shapes and sizes thanks to a twelve column system, five default responsive tiers, Sass variables and mixins, and dozens of predefined classes/options.
</DocHead>

<Example File=@typeof(EqualWidthGrid1) />

<p>The above example creates three equal-width columns on small, medium, large, and extra large devices using our predefined grid classes. Those columns are centered in the page with the parent <code class="highlighter-rouge">.container</code>.</p>

<h3 id="equal-width">Equal-width</h3>

<p>For example, here are two grid layouts that apply to every device and viewport, from <code class="highlighter-rouge">xs</code> to <code class="highlighter-rouge">xl</code>. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.</p>

<Example File=@typeof(EqualWidthGrid2) />

<h3 id="setting-one-column-width">Setting one column width</h3>

<p>Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.</p>

<Example File=@typeof(SettingOneColumnWidth) />

<h3 id="variable-width-content">Variable width content</h3>

<p>Use <code class="highlighter-rouge">{breakpoint}-auto</code> classes to size columns based on the natural width of their content.</p>

<Example File=@typeof(VariableWidthContent) />

<h3 id="equal-width-multi-row">Equal-width multi-row</h3>

<p>Create equal-width columns that span multiple rows by inserting a <code class="highlighter-rouge">.w-100</code> where you want the columns to break to a new line. Make the breaks responsive by mixing the <code class="highlighter-rouge">.w-100</code> with some <BootstrapDocLink href="/docs/4.3/utilities/display/">responsive display utilities</BootstrapDocLink>.</p>

<Example File=@typeof(EqualWidthMultiRow) />

<h2 id="responsive-classes">Responsive classes</h2>

<p>Bootstrap’s grid includes five tiers of predefined classes for building complex responsive layouts. Customize the size of your columns on extra small, small, medium, large, or extra large devices however you see fit.</p>

<h3 id="all-breakpoints">All breakpoints</h3>

<p>For grids that are the same from the smallest of devices to the largest, use the <code class="highlighter-rouge">&lt;Column /&gt;</code> and <code class="highlighter-rouge">&lt;Column Span=&quot;*&quot; /&gt;</code> component with or without the Span options. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to <code class="highlighter-rouge">&lt;Column /&gt;</code>.</p>

<Example File=@typeof(AllBreakpoints) />

<h3 id="stacked-to-horizontal">Stacked to horizontal</h3>

<p>Using a single set of <code class="highlighter-rouge">&lt;Column Span=&quot;sm-*&quot; /&gt;</code> Span options, you can create a basic grid system that starts out stacked and becomes horizontal at the small breakpoint (<code class="highlighter-rouge">sm</code>).</p>

<Example File=@typeof(StackedToHorizontal) />

<h3 id="mix-and-match">Mix and match</h3>

<p>Don’t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.</p>

<Example File=@typeof(MixAndMatch) />

<h3 id="gutters">Gutters</h3>

<p>Gutters can be responsively adjusted by breakpoint-specific padding and negative margin utility options. To change the gutters in a given row, pair a negative margin utility on the <code class="highlighter-rouge">&lt;Row /&gt;</code> and matching padding utilities on the <code class="highlighter-rouge">&lt;Column /&gt;</code>s. The <code class="highlighter-rouge">&lt;Container /&gt;</code> or <code class="highlighter-rouge">&lt;Container Type=&quot;fluid&quot; /&gt;</code> parent may need to be adjusted too to avoid unwanted overflow, using again matching padding utility.</p>

<p>Here’s an example of customizing the Bootstrap grid at the large (<code class="highlighter-rouge">lg</code>) breakpoint and above. We’ve increased the <code class="highlighter-rouge">&lt;Column /&gt;</code> padding with <code class="highlighter-rouge">Padding="horizontal-lg-5"</code> option, counteracted that with <code class="highlighter-rouge">Margin="horizontal-lg-n5"</code> on the parent <code class="highlighter-rouge">&lt;Row /&gt;</code> and then adjusted the <code class="highlighter-rouge">&lt;Container /&gt;</code> wrapper with <code class="highlighter-rouge">Padding="horizontal-lg-5"</code>.</p>

<Example File=@typeof(Gutters) />

<h2 id="alignment">Alignment</h2>

<p>Use flexbox alignment utilities to vertically and horizontally align columns.</p>

<h3 id="vertical-alignment">Vertical alignment</h3>

<Example File=@typeof(VerticalAlignment1) />

<Example File=@typeof(VerticalAlignment2) />

<h3 id="horizontal-alignment">Horizontal alignment</h3>

<Example File=@typeof(HorizontalAlignment) />

<h3 id="no-gutters">No gutters</h3>

<p>The gutters between columns in our predefined grid components can be removed with <code class="highlighter-rouge">NoGutters=&quot;true&quot;</code> option. This removes the negative <code class="highlighter-rouge">margin</code>s from <code class="highlighter-rouge">&lt;Row /&gt;</code> and the horizontal <code class="highlighter-rouge">padding</code> from all immediate children columns.</p>

<Example File=@typeof(NoGutters) />

<h3 id="column-wrapping">Column wrapping</h3>

<p>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.</p>

<Example File=@typeof(ColumnWrapping) />

<h3 id="column-breaks">Column breaks</h3>

<p>Breaking columns to a new line in flexbox requires a small hack: add an element with <code class="highlighter-rouge">width: 100%</code> wherever you want to wrap your columns to a new line. Normally this is accomplished with multiple <code class="highlighter-rouge">&lt;Row /&gt;</code>s, but not every implementation method can account for this.</p>

<Example File=@typeof(ColumnBreaks1) />

<p>You may also apply this break at specific breakpoints with our <BootstrapDocLink href="/docs/4.3/utilities/display/">responsive display utilities</BootstrapDocLink>.</p>

<Example File=@typeof(ColumnBreaks2) />

<h2 id="reordering">Reordering</h2>

<h3 id="order-classes">Order classes</h3>

<p>Use <code class="highlighter-rouge">Order="*"</code> options for controlling the <strong>visual order</strong> of your content. These classes are responsive, so you can set the <code class="highlighter-rouge">order</code> by breakpoint (e.g., <code class="highlighter-rouge">Order="1 | md-2"</code>). Includes support for <code class="highlighter-rouge">1</code> through <code class="highlighter-rouge">12</code> across all five grid tiers.</p>

<Example File=@typeof(OrderClasses1) />

<p>There are also responsive <code class="highlighter-rouge">Order="first"</code> and <code class="highlighter-rouge">Order="last"</code> classes that change the <code class="highlighter-rouge">order</code> of an element by applying <code class="highlighter-rouge">order: -1</code> and <code class="highlighter-rouge">order: 13</code> (<code class="highlighter-rouge">order: $columns + 1</code>), respectively. These options can also be intermixed with the numbered <code class="highlighter-rouge">Order="*"</code> options as needed.</p>

<Example File=@typeof(OrderClasses2) />

<h3 id="offsetting-columns">Offsetting columns</h3>

<p>You can offset grid columns in two ways: our responsive <code class="highlighter-rouge">Offset="*"</code> grid options and our <NavLink href="/docs/4.3/utilities/spacing/">margin utilities</NavLink>. Grid options are sized to match columns while margins are more useful for quick layouts where the width of the offset is variable.</p>

<h4 id="offset-classes">Offset classes</h4>

<p>Move columns to the right using <code class="highlighter-rouge">Offset="md-*"</code> options. These classes increase the left margin of a column by <code class="highlighter-rouge">*</code> columns. For example, <code class="highlighter-rouge">Offset="md-4"</code> moves <code class="highlighter-rouge">Span="md-4"</code> over four columns.</p>

<Example File=@typeof(OffsetClasses1) />

<p>In addition to column clearing at responsive breakpoints, you may need to reset offsets. See this in action in <BootstrapDocLink href="/docs/4.3/examples/grid/">the grid example</BootstrapDocLink>.</p>

<Example File=@typeof(OffsetClasses2) />

<h4 id="margin-utilities">Margin utilities</h4>

<p>With the move to flexbox in v4, you can use margin utilities like <code class="highlighter-rouge">Margin="right-auto"</code> to force sibling columns away from one another.</p>

<Example File=@typeof(MarginUtilities) />

<h2 id="nesting">Nesting</h2>

<p>To nest your content with the default grid, add a new <code class="highlighter-rouge">&lt;Row /&gt;</code> and set of <code class="highlighter-rouge">Span="sm-*"</code> columns within an existing <code class="highlighter-rouge">Span="sm-*"</code> column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).</p>

<Example File=@typeof(Nesting) />